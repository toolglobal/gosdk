package gosdk

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/axengine/gosdk/types"
	ethcmn "github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"math/big"
	"strconv"
	"testing"
	"time"
)

const (
	DEV_API_URL_BASE = "http://192.168.10.106:8889"
	DEV_USER_PRIVKEY = "7fffe4e426a6772ae8a1c0f2425a90fc6320d23e416fb6d83802889fa846faa2"
	DEV_USER_PUBKEY  = "03815a906de2017c7351be33644cd60a6fff9407ce04896b2328944bc4e628abd8"
	DEV_USER_ADDRESS = "0x0F508F143E77b39F8e20DD9d2C1e515f0f527D9F"
)

func TestAPISDK_Payment(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	tx, err := api.Payment(MODE_DEFAULT, DEV_USER_PUBKEY,
		"7fffe4e426a6772ae8a1c0f2425a90fc6320d23e416fb6d83802889fa846faa2",
		"0xc8F516fa76868b4C16bA439F3131911828339Ed5", //可填地址
		"10000000000", //1.00000002个OLO
		23000, "1", VERSION)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx)
}

func TestAPISDK_DeployTx(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	tx, contractAddress, gasUsed, err := api.DeployTx("", DEV_USER_PUBKEY,
		DEV_USER_PRIVKEY,
		"0",
		"0x608060405260016002556404a817c80060055560146006556301e1338060075564174876e8006008556000600c5534801561003957600080fd5b50604051612ba3380380612ba38339818101604052604081101561005c57600080fd5b508051602090910151600080546001600160a01b031990811633908117821617909155600380546001600160a01b0394851690831617905560048054939092169216919091179055612af0806100b36000396000f3fe60806040526004361061021a5760003560e01c8063715018a611610123578063b83e19be116100ab578063dfaf734a1161006f578063dfaf734a1461071c578063e30c397814610731578063ee8a66d614610746578063f2fde38b1461078f578063f7cd2bc5146107c25761021a565b8063b83e19be146106c0578063be2fa2f2146106d5578063cab43ba0146106ea578063d0e30db0146106ff578063dab4b6fd146107075761021a565b80638da5cb5b116100f25780638da5cb5b14610639578063a507dfe41461064e578063a53c221014610663578063b3c53a9814610678578063b7e4c54d146106ab5761021a565b8063715018a61461056857806377e838aa1461057d57806379ff6632146105925780637dce34f7146105cb5761021a565b80632d2647af116101a6578063426afcad11610175578063426afcad146104b75780634a7e98ea146104cc5780634e71e0c8146104ff5780635f1a77861461051457806360f31f891461053e5761021a565b80632d2647af146103d357806335a78aa9146104065780633c4458d81461044957806341da5c211461047c5761021a565b80631e4d3dab116101ed5780631e4d3dab146102f25780632412bdb81461031c57806326f7eb671461036157806329556f8d146103945780632c72542c146103a95761021a565b806301e336671461021f57806310cae21a146102645780631a686502146102b35780631d1d8f2f146102c8575b600080fd5b34801561022b57600080fd5b506102626004803603606081101561024257600080fd5b506001600160a01b038135811691602081013590911690604001356107fd565b005b34801561027057600080fd5b506102976004803603602081101561028757600080fd5b50356001600160a01b03166108be565b604080516001600160a01b039092168252519081900360200190f35b3480156102bf57600080fd5b50610262610aad565b3480156102d457600080fd5b50610297600480360360208110156102eb57600080fd5b5035610d50565b3480156102fe57600080fd5b506102626004803603602081101561031557600080fd5b5035610d77565b34801561032857600080fd5b5061034f6004803603602081101561033f57600080fd5b50356001600160a01b0316610d7c565b60408051918252519081900360200190f35b34801561036d57600080fd5b506102626004803603602081101561038457600080fd5b50356001600160a01b0316610f6b565b3480156103a057600080fd5b5061034f611021565b3480156103b557600080fd5b50610262600480360360208110156103cc57600080fd5b5035611027565b3480156103df57600080fd5b50610262600480360360208110156103f657600080fd5b50356001600160a01b031661102c565b34801561041257600080fd5b506102626004803603606081101561042957600080fd5b506001600160a01b03813581169160208101359091169060400135611288565b34801561045557600080fd5b5061034f6004803603602081101561046c57600080fd5b50356001600160a01b0316611361565b34801561048857600080fd5b506102626004803603604081101561049f57600080fd5b506001600160a01b0381358116916020013516611373565b3480156104c357600080fd5b5061034f6113f1565b3480156104d857600080fd5b50610262600480360360208110156104ef57600080fd5b50356001600160a01b03166113f7565b34801561050b57600080fd5b50610262611441565b34801561052057600080fd5b506102626004803603602081101561053757600080fd5b50356114bc565b34801561054a57600080fd5b506102626004803603602081101561056157600080fd5b50356114c1565b34801561057457600080fd5b506102626114c6565b34801561058957600080fd5b5061034f611525565b34801561059e57600080fd5b50610262600480360360408110156105b557600080fd5b506001600160a01b03813516906020013561152b565b3480156105d757600080fd5b506105fe600480360360208110156105ee57600080fd5b50356001600160a01b03166115ea565b604080518481526001600160a01b038416602082015290810182600181111561062357fe5b60ff168152602001935050505060405180910390f35b34801561064557600080fd5b50610297611618565b34801561065a57600080fd5b50610297611627565b34801561066f57600080fd5b5061034f611636565b34801561068457600080fd5b5061034f6004803603602081101561069b57600080fd5b50356001600160a01b031661163c565b3480156106b757600080fd5b5061034f61164e565b3480156106cc57600080fd5b5061034f611654565b3480156106e157600080fd5b5061034f61165a565b3480156106f657600080fd5b5061034f6116de565b6102626116e4565b34801561071357600080fd5b506102976116e6565b34801561072857600080fd5b5061034f6116f5565b34801561073d57600080fd5b506102976116fb565b34801561075257600080fd5b506102626004803603608081101561076957600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561170a565b34801561079b57600080fd5b50610262600480360360208110156107b257600080fd5b50356001600160a01b03166117de565b3480156107ce57600080fd5b50610262600480360360408110156107e557600080fd5b506001600160a01b0381358116916020013516611817565b600254600114610848576040805162461bcd60e51b8152602060048201526011602482015270115610da185b9b995b0e881313d0d2d151607a1b604482015290519081900360640190fd5b60006002819055546001600160a01b0316331461086457600080fd5b6001600160a01b0382166108a95760405162461bcd60e51b815260040180806020018281038252602f815260200180612920602f913960400191505060405180910390fd5b6108b48383836118e1565b5050600160025550565b600080546001600160a01b031633146108d657600080fd5b6001600160a01b03821661091b5760405162461bcd60e51b81526004018080602001828103825260308152602001806128f06030913960400191505060405180910390fd5b60606040518060200161092d90611b68565b6020820181038252601f19601f82011660405250905060004260405160200180828152602001915050604051602081830303815290604052805190602001209050808251602084016000f5600354600480546040805163c0c53b8b60e01b815230938101939093526001600160a01b0393841660248401529083166044830152519295509085169163c0c53b8b9160648082019260009290919082900301818387803b1580156109dc57600080fd5b505af11580156109f0573d6000803e3d6000fd5b50506040805160608101825260008082526001600160a01b03898116602080850191825260018587018181528c8516865260099092529590932084518155905181860180546001600160a01b031916919093161780835592519396509450919260ff60a01b1990911690600160a01b908490811115610a6b57fe5b0217905550506040516001600160a01b03851691507fc625d37dd8b556110d70984e62f74ba35c77422c83c5f548fbd21b697a67ef5c90600090a25050919050565b600254600114610af8576040805162461bcd60e51b8152602060048201526011602482015270115610da185b9b995b0e881313d0d2d151607a1b604482015290519081900360640190fd5b60006002819055546001600160a01b03163314610b1457600080fd5b610b1c61165a565b600d819055600354604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610b6c57600080fd5b505afa158015610b80573d6000803e3d6000fd5b505050506040513d6020811015610b9657600080fd5b50511015610bd55760405162461bcd60e51b815260040180806020018281038252602e815260200180612a67602e913960400191505060405180910390fd5b42600c556000600e81905560108190555b600b54811015610d01576000600b8281548110610bff57fe5b60009182526020808320909101546001600160a01b0316808352600f82526040808420849055600a909252912054909150428110610cf65760048054604080516370a0823160e01b81526001600160a01b03868116948201949094529051600093909216916370a0823191602480820192602092909190829003018186803b158015610c8a57600080fd5b505afa158015610c9e573d6000803e3d6000fd5b505050506040513d6020811015610cb457600080fd5b5051600854909150811015610ccb57505050610cf9565b600e8054820190556010805460010190556001600160a01b0383166000908152600f60205260409020555b50505b600101610be6565b50600d54600e5460105460408051938452602084019290925282820152517f7d61f45d13c5cc67eb02340fffd43dbfe40a1554d66f3fea138bb4c99dbb647e9181900360600190a16001600255565b600b8181548110610d5d57fe5b6000918252602090912001546001600160a01b0316905081565b600655565b33600090815260096020526040812060018082810154600160a01b900460ff1690811115610da657fe5b14610de25760405162461bcd60e51b815260040180806020018281038252602a815260200180612890602a913960400191505060405180910390fd5b6001600160a01b0383166000908152600f6020526040902054600854811015610e3c5760405162461bcd60e51b815260040180806020018281038252602b81526020018061294f602b913960400191505060405180910390fd5b6001600160a01b0384166000908152600a60205260409020544210610e925760405162461bcd60e51b8152600401808060200182810382526026815260200180612a956026913960400191505060405180910390fd5b6000610ea3600e54600d5484611a4b565b905060008111610ee45760405162461bcd60e51b815260040180806020018281038252602581526020018061297a6025913960400191505060405180910390fd5b600354610efb906001600160a01b031686836118e1565b6001600160a01b0385166000818152600f6020908152604080832092909255600e80548690039055600d805485900390558151858152908101849052815133927f9a406bc63ac2307f5ee52002fb44c825e70ce5c177ca9cd148425d32053ed68d928290030190a3509392505050565b6000546001600160a01b03163314610f8257600080fd5b6001600160a01b03811660009081526009602052604090206001808201805460ff60a01b1916600160a01b835b02179055506001600160a01b038083166000908152600960205260409020825481556001808401805482840180546001600160a01b03191691909516178085559054859460ff600160a01b928390041693909260ff60a01b19169190849081111561101657fe5b021790555050505050565b60105481565b600555565b33600090815260096020526040902060018082810154600160a01b900460ff169081111561105657fe5b146110925760405162461bcd60e51b8152600401808060200182810382526030815260200180612a376030913960400191505060405180910390fd5b6000606460065460055402816110a457fe5b049050801561113a5760035460018301546040805163a9059cbb60e01b81526001600160a01b039283166004820152602481018590529051919092169163a9059cbb9160448083019260209291908290030181600087803b15801561110857600080fd5b505af115801561111c573d6000803e3d6000fd5b505050506040513d602081101561113257600080fd5b505161113a57fe5b81546001908101808455336000908152600960205260409020908155818401805482840180546001600160a01b0319166001600160a01b0392909216919091178082559154869460ff600160a01b92839004169360ff60a01b1916919084908111156111a257fe5b021790555050506001600160a01b0383166000908152600a60205260409020548061121357600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180546001600160a01b0319166001600160a01b0386161790555b42811115611224576007540161122b565b5060075442015b6001600160a01b0384166000818152600a6020908152604091829020849055600554825185815291820152815133927f9adff5b86bab83d902901e50d56aa69abf5ae44766414cb97328f004b2c98f3c928290030190a350505050565b6000546001600160a01b0316331461129f57600080fd5b6001600160a01b0382166112e45760405162461bcd60e51b81526004018080602001828103825260368152602001806128ba6036913960400191505060405180910390fd5b826001600160a01b03166379ff663283836040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561134457600080fd5b505af1158015611358573d6000803e3d6000fd5b50505050505050565b600a6020526000908152604090205481565b600354600480546040805163c0c53b8b60e01b81526001600160a01b038681169482019490945293831660248501529082166044840152519084169163c0c53b8b91606480830192600092919082900301818387803b1580156113d557600080fd5b505af11580156113e9573d6000803e3d6000fd5b505050505050565b600e5481565b6000546001600160a01b0316331461140e57600080fd5b6001600160a01b038116600090815260096020526040812060018101805491929160ff60a01b1916600160a01b83610faf565b6001546001600160a01b0316331461145857600080fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b600855565b600755565b6000546001600160a01b031633146114dd57600080fd5b600080546040516001600160a01b03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a2600080546001600160a01b0319169055565b600d5481565b600254600114611576576040805162461bcd60e51b8152602060048201526011602482015270115610da185b9b995b0e881313d0d2d151607a1b604482015290519081900360640190fd5b60006002819055546001600160a01b0316331461159257600080fd5b6001600160a01b0382166115d75760405162461bcd60e51b815260040180806020018281038252602d815260200180612a0a602d913960400191505060405180910390fd5b6115e18282611a70565b50506001600255565b600960205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b6000546001600160a01b031681565b6003546001600160a01b031681565b60065481565b600f6020526000908152604090205481565b60085481565b60055481565b60006301e1338042635b9b40a21901600182820401667fe5cf2bea00006101f46078865b848110156116d3576127108385020460001986018214156116ad5761016d8104985050505050505050506116db565b938490039360648484020493506127108411156116ca5761271093505b5060010161167e565b505050505050505b90565b60075481565b565b6004546001600160a01b031681565b600c5481565b6001546001600160a01b031681565b6000546001600160a01b0316331461172157600080fd5b6001600160a01b0382166117665760405162461bcd60e51b815260040180806020018281038252603881526020018061299f6038913960400191505060405180910390fd5b604080516301e3366760e01b81526001600160a01b0385811660048301528481166024830152604482018490529151918616916301e336679160648082019260009290919082900301818387803b1580156117c057600080fd5b505af11580156117d4573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146117f557600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461182e57600080fd5b6001600160a01b0381166118735760405162461bcd60e51b81526004018080602001828103825260338152602001806129d76033913960400191505060405180910390fd5b6001600160a01b038281166000908152600960205260409020600180820180546001600160a01b031990811686861617948516941693909317808455919283928392600160a01b80830460ff16939260ff60a01b19169184908111156118d557fe5b02179055505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b6020831061195e5780518252601f19909201916020918201910161193f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146119c0576040519150601f19603f3d011682016040523d82523d6000602084013e6119c5565b606091505b50915091508180156119f35750805115806119f357508080602001905160208110156119f057600080fd5b50515b611a44576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b60006305f5e100828186048581611a5e57fe5b040281611a6757fe5b04949350505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b60208310611abc5780518252601f199092019160209182019101611a9d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611b1e576040519150601f19603f3d011682016040523d82523d6000602084013e611b23565b606091505b5050905080611b635760405162461bcd60e51b815260040180806020018281038252602381526020018061286d6023913960400191505060405180910390fd5b505050565b610cf780611b768339019056fe60806040526001805534801561001457600080fd5b50600080546001600160a01b031990811633908117909116179055610cb98061003e6000396000f3fe6080604052600436106100a75760003560e01c8063a507dfe411610064578063a507dfe41461018d578063c0c53b8b146101a2578063d0e30db0146101e7578063d2f7265a146101ef578063dab4b6fd14610204578063f2fde38b14610219576100a7565b806301e33667146100ac5780632dd31000146100f15780632f6f098114610122578063715018a61461012a57806379ff66321461013f5780638da5cb5b14610178575b600080fd5b3480156100b857600080fd5b506100ef600480360360608110156100cf57600080fd5b506001600160a01b0381358116916020810135909116906040013561024c565b005b3480156100fd57600080fd5b5061010661030c565b604080516001600160a01b039092168252519081900360200190f35b6100ef61031b565b34801561013657600080fd5b506100ef61053a565b34801561014b57600080fd5b506100ef6004803603604081101561016257600080fd5b506001600160a01b038135169060200135610599565b34801561018457600080fd5b50610106610657565b34801561019957600080fd5b50610106610666565b3480156101ae57600080fd5b506100ef600480360360608110156101c557600080fd5b506001600160a01b038135811691602081013582169160409091013516610675565b6100ef6106cb565b3480156101fb57600080fd5b506100ef6106cd565b34801561021057600080fd5b50610106610767565b34801561022557600080fd5b506100ef6004803603602081101561023c57600080fd5b50356001600160a01b0316610776565b600154600114610297576040805162461bcd60e51b8152602060048201526011602482015270115610da185b9b995b0e881313d0d2d151607a1b604482015290519081900360640190fd5b60006001819055546001600160a01b031633146102b357600080fd5b6001600160a01b0382166102f85760405162461bcd60e51b8152600401808060200182810382526028815260200180610c316028913960400191505060405180910390fd5b610303838383610796565b50506001805550565b6002546001600160a01b031681565b60025460408051635c1f0cdf60e11b815290516000926001600160a01b03169163b83e19be916004808301926020929190829003018186803b15801561036057600080fd5b505afa158015610374573d6000803e3d6000fd5b505050506040513d602081101561038a57600080fd5b50519050348111156103cd5760405162461bcd60e51b815260040180806020018281038252602b815260200180610c59602b913960400191505060405180910390fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561041d57600080fd5b505af1158015610431573d6000803e3d6000fd5b50506003546002546040805163a9059cbb60e01b81526001600160a01b03928316600482015260248101889052905191909216945063a9059cbb9350604480830193506020928290030181600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b505050506040513d60208110156104b757600080fd5b50516104bf57fe5b60025460408051632d2647af60e01b815233600482015290516001600160a01b0390921691632d2647af9160248082019260009290919082900301818387803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b50505050803411156105375761053733823403610900565b50565b6000546001600160a01b0316331461055157600080fd5b600080546040516001600160a01b03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a2600080546001600160a01b0319169055565b6001546001146105e4576040805162461bcd60e51b8152602060048201526011602482015270115610da185b9b995b0e881313d0d2d151607a1b604482015290519081900360640190fd5b60006001819055546001600160a01b0316331461060057600080fd5b6001600160a01b0382166106455760405162461bcd60e51b8152600401808060200182810382526026815260200180610be76026913960400191505060405180910390fd5b61064f8282610900565b505060018055565b6000546001600160a01b031681565b6003546001600160a01b031681565b6000546001600160a01b0316331461068c57600080fd5b600280546001600160a01b039485166001600160a01b031991821617909155600380549385169382169390931790925560048054919093169116179055565b565b6002546040805163048257b760e31b815233600482015290516000926001600160a01b031691632412bdb891602480830192602092919082900301818787803b15801561071957600080fd5b505af115801561072d573d6000803e3d6000fd5b505050506040513d602081101561074357600080fd5b5051600454600254919250610537916001600160a01b0391821691339116846109f8565b6004546001600160a01b031681565b6000546001600160a01b0316331461078d57600080fd5b61053781610b55565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b178152925182516000946060949389169392918291908083835b602083106108135780518252601f1990920191602091820191016107f4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610875576040519150601f19603f3d011682016040523d82523d6000602084013e61087a565b606091505b50915091508180156108a85750805115806108a857508080602001905160208110156108a557600080fd5b50515b6108f9576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b6020831061094c5780518252601f19909201916020918201910161092d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146109ae576040519150601f19603f3d011682016040523d82523d6000602084013e6109b3565b606091505b50509050806109f35760405162461bcd60e51b8152600401808060200182810382526023815260200180610bc46023913960400191505060405180910390fd5b505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17815292518251600094606094938a169392918291908083835b60208310610a7d5780518252601f199092019160209182019101610a5e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610adf576040519150601f19603f3d011682016040523d82523d6000602084013e610ae4565b606091505b5091509150818015610b12575080511580610b125750808060200190516020811015610b0f57600080fd5b50515b610b4d5760405162461bcd60e51b8152600401808060200182810382526024815260200180610c0d6024913960400191505060405180910390fd5b505050505050565b6001600160a01b038116610b6857600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe5472616e7366657248656c7065723a204f4c4f5f5452414e534645525f4641494c45444368616e6e656c3a3a77697468647261774f4c4f206164647265737320666f7262696464656e5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c45444368616e6e656c3a3a7769746864726177546f6b656e206164647265737320666f7262696464656e4368616e6e656c3a3a6372656174655f6d616368696e65206d73672e76616c756520746f6f20736d616c6ca264697066735822122015c94ac49eeb3850ede0aa8420d091ea6d0684e5f8a7ee5ab3fd274cc1ee811064736f6c634300060600335472616e7366657248656c7065723a204f4c4f5f5452414e534645525f4641494c454445786368616e676572416c7068613a3a65786368616e6765206368616e6e656c20666f7262696464656e45786368616e676572416c7068613a3a77697468647261775f6368616e6e656c5f4f4c4f206164647265737320666f7262696464656e45786368616e676572416c7068613a3a6372656174655f6368616e6e656c206164647265737320666f7262696464656e45786368616e676572416c7068613a3a7769746864726177546f6b656e206164647265737320666f7262696464656e45786368616e676572416c7068613a3a65786368616e6765204254204c5020696e73756666696369656e7445786368616e676572416c7068613a3a65786368616e676520676f74204f4c4f206973203045786368616e676572416c7068613a3a77697468647261775f6368616e6e656c5f546f6b656e206164647265737320666f7262696464656e45786368616e676572416c7068613a3a7365745f6368616e6e656c5f666565746f206164647265737320666f7262696464656e45786368616e676572416c7068613a3a77697468647261774f4c4f206164647265737320666f7262696464656e45786368616e676572416c7068613a3a6372656174655f6d616368696e65206368616e6e656c20666f7262696464656e45786368616e676572416c7068613a3a6c697175696469747920574f4c4f20697320696e73756666696369656e7445786368616e676572416c7068613a3a65786368616e6765206d616368696e6520656e646564a2646970667358221220442de52d80160e5d56a497615db174ac691e22b93c2edd408c1d79f50f28e23d64736f6c634300060600330000000000000000000000008a8ef5e5241c7a3f311afbf2a9ec154c2568606a000000000000000000000000f2bfd447ab18ed8f5ddc0d1daa1d04171761220a",
		30000000, "1", "")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx)
	t.Log(contractAddress) //0x50f95C121D5Ed835ea93584AE7503cC2072E9833
	t.Log(gasUsed)
}

func TestAPISDK_InvokeTx(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	tx, rets, gasUsed, err := api.InvokeTx("", DEV_USER_PUBKEY,
		DEV_USER_PRIVKEY,
		"0x50f95C121D5Ed835ea93584AE7503cC2072E9833",
		"0",
		"0xa9059cbb000000000000000000000000fed85a3376a4aa4aa5edf542a29f7e6c6000c3a000000000000000000000000000000000000000000000000000000000000003e8",
		3000000, "1", "")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx)
	t.Log(rets)
	t.Log(gasUsed)
}

func TestAPISDK_QueryTx(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	tx, rets, err := api.QueryTx(DEV_USER_PUBKEY,
		DEV_USER_PRIVKEY,
		"0x50f95C121D5Ed835ea93584AE7503cC2072E9833",
		"0",
		"0x70a08231000000000000000000000000fed85a3376a4aa4aa5edf542a29f7e6c6000c3a0",
		3000000, "1")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx)
	t.Log(rets)
}

func TestAPISDK_GetBalance(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	balance, err := api.GetBalance(DEV_USER_ADDRESS)
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println(balance)
}

func TestAPISDK_GetAccount(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	balance, nonce, err := api.GetAccount(DEV_USER_ADDRESS)
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println(balance, nonce)
}

func TestAPISDK_GetContract(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	balance, nonce, code, suicided, err := api.GetContract("0x50f95C121D5Ed835ea93584AE7503cC2072E9833")
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println(balance)
	fmt.Println(nonce)
	fmt.Println(code)
	fmt.Println(suicided)
}

func TestAPISDK_Payments(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	var pays []Operation
	for i := 0; i < 3; i++ {
		pays = append(pays, Operation{
			To:    "0xfed85a3376a4aa4aa5edf542a29f7e6C6000c3A0",
			Value: strconv.Itoa(i + 100000000),
		})
	}
	gasLimit := uint64(len(pays) * 21000)
	tx, err := api.Payments("", DEV_USER_PUBKEY,
		"7fffe4e426a6772ae8a1c0f2425a90fc6320d23e416fb6d83802889fa846faa2",
		pays,
		gasLimit, "1", "测试批量转账")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx)
}

func TestAPISDK_Exist(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	exist, err := api.Exist("03815a906de2017c7351be33644cd60a6fff9407ce04896b2328944bc4e628abd8")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(exist)
}

func TestAPISDK_ValidAddress(t *testing.T) {
	b := types.ValidPublicKey("0x03e8ecafde6892c23342faa02c2a65ed0250449a8aed177115acfcbce04c34ade5")
	if b {
		t.Fatal("ignore...")
	}
	b = types.ValidPublicKey("03815a906de2017c7351be33644cd60a6fff9407ce04896b2328944bc4e628abd8")
	if !b {
		t.Fatal("ignore...")
	}
}

func TestAPISDK_ERC20BalanceOf(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	balance, err := api.ERC20BalanceOf(DEV_USER_PUBKEY,
		DEV_USER_PRIVKEY,
		"0xe1066eBcFC8fbD7172886F15F538b63804676A74",
		"0x0F508F143E77b39F8e20DD9d2C1e515f0f527D9F")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(balance)
}

func TestAPISDK_ERC20Pay(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	tx, _gasUsed, err := api.ERC20Pay("", DEV_USER_PUBKEY,
		DEV_USER_PRIVKEY,
		"0x8a8eF5E5241C7A3f311aFBF2a9ec154c2568606A",
		"0x7AeBb40DAF973BF1176f4036331719dA99e75ea8", "100000000000000", 100000, "1", "test")
	if err != nil {
		t.Fatal(err)
	}
	t.Log(tx)
	t.Log(_gasUsed)
}

func TestAPISDK_GenMultiSignAct(t *testing.T) {
	k, n := 3, 5
	acts := generateAccounts(n)

	bz, _ := json.MarshalIndent(acts, "", "  ")
	fmt.Println(string(bz))
	/*
	   [
	     {
	       "PrivKey": "dabb1cc1de72174607b55d4571a12266f8ab516a160ea18340737fa6fa7b9bee",
	       "PubKey": "02ba78dc05c74785deb613afb572253b8b200c5ab0d392430df9d6bece3c279a01",
	       "Address": "0xbd3c2B5d7e491947112A84230c7DB14A48BFabd8"
	     },
	     {
	       "PrivKey": "ad73e2b847b0b61d5e6cb63eadeaad4a85d0f9862d01fa77cc235d6b50d759aa",
	       "PubKey": "02406579e48cafa4cc000d6aaa5fdeeca15b4582109ca7ee4f4e978621c9942c48",
	       "Address": "0xB9D8B91402873A293fD700535FB1D12DecE47909"
	     },
	     {
	       "PrivKey": "d16241c2e8b80dff8685afea62dcdc64fbc06d3892523f9944ae7db4dbaa1791",
	       "PubKey": "0227ac4e41e263dc421918909a42122e51b099a25c5c6a1683830d1d8750d9e5ac",
	       "Address": "0x1Ac04233C1D38596Afa903f5BF80B4f02fBe2B0B"
	     },
	     {
	       "PrivKey": "506bfaa2a2daa73668d131aeb773fe73e837e8e5b0f6bcf71bf10ab1a27fe171",
	       "PubKey": "024a809bf4b40d668bfeadf4b305c76d23764bccb92282d5456698eaf023e816ef",
	       "Address": "0x9f5878cc3d48a8D88C768a32fab31a7E4FE6b8df"
	     },
	     {
	       "PrivKey": "824da283ddfbff2423037c7da2179dd05f66d469798049abbac6eed94d32d5e9",
	       "PubKey": "02f054b1f397eda93dc7e41dc816065ee5c34e3f1a929f0de6e7ddcb311d29ceec",
	       "Address": "0x026Db62fE102aE0071cCacdFFBA46Ec05311d330"
	     }
	   ]
	*/
	var pkeySet []types.PublicKey
	for _, v := range acts {
		var pkey types.PublicKey
		copy(pkey[:], ethcmn.Hex2Bytes(v.PubKey))
		pkeySet = append(pkeySet, pkey)
	}

	// 多签账户
	pkey := types.NewPubKeyMultisigThreshold(k, pkeySet)

	fmt.Println(pkey.Address().Hex()) // 0xc8F516fa76868b4C16bA439F3131911828339Ed5

	bz, _ = json.MarshalIndent(pkey, "", "  ")
	fmt.Println(string(bz))

	/*
	   {
	     "threshold": 3,
	     "pubkeys": [
	       "0x0227ac4e41e263dc421918909a42122e51b099a25c5c6a1683830d1d8750d9e5ac",
	       "0x02406579e48cafa4cc000d6aaa5fdeeca15b4582109ca7ee4f4e978621c9942c48",
	       "0x024a809bf4b40d668bfeadf4b305c76d23764bccb92282d5456698eaf023e816ef",
	       "0x02ba78dc05c74785deb613afb572253b8b200c5ab0d392430df9d6bece3c279a01",
	       "0x02f054b1f397eda93dc7e41dc816065ee5c34e3f1a929f0de6e7ddcb311d29ceec"
	     ]
	   }
	*/
}

func TestAPISDK_MultiSignTx(t *testing.T) {
	var mutliSignAct types.PubKeyMultisigThreshold
	err := json.Unmarshal([]byte(`
	   {
	     "threshold": 3,
	     "pubkeys": [
	       "0x0227ac4e41e263dc421918909a42122e51b099a25c5c6a1683830d1d8750d9e5ac",
	       "0x02406579e48cafa4cc000d6aaa5fdeeca15b4582109ca7ee4f4e978621c9942c48",
	       "0x024a809bf4b40d668bfeadf4b305c76d23764bccb92282d5456698eaf023e816ef",
	       "0x02ba78dc05c74785deb613afb572253b8b200c5ab0d392430df9d6bece3c279a01",
	       "0x02f054b1f397eda93dc7e41dc816065ee5c34e3f1a929f0de6e7ddcb311d29ceec"
	     ]
	   }`), &mutliSignAct)
	if err != nil {
		t.Fatal(err)
	}

	tx := types.NewMultisigEvmTx(int(mutliSignAct.K), mutliSignAct.PubKeys)
	tx.Deadline = uint64(time.Now().Add(time.Minute).Unix())
	tx.GasLimit = 100000000
	tx.GasPrice = new(big.Int).SetInt64(1)
	tx.From = ethcmn.HexToAddress("0xc8F516fa76868b4C16bA439F3131911828339Ed5")
	tx.Nonce = 0
	tx.To = ethcmn.HexToAddress(DEV_USER_ADDRESS)
	tx.Value = big.NewInt(123)
	tx.Memo = []byte("multi sign tx test")

	if err := tx.Sign("dabb1cc1de72174607b55d4571a12266f8ab516a160ea18340737fa6fa7b9bee"); err != nil {
		t.Fatal(err)
	}
	if err := tx.Sign("824da283ddfbff2423037c7da2179dd05f66d469798049abbac6eed94d32d5e9"); err != nil {
		t.Fatal(err)
	}
	if err := tx.Sign("d16241c2e8b80dff8685afea62dcdc64fbc06d3892523f9944ae7db4dbaa1791"); err != nil {
		t.Fatal(err)
	}

	if !tx.Verify() {
		t.Fatal("Verify failed")
	}

	fmt.Println("hash:", tx.Hash())
	api := NewAPIClient("http://127.0.0.1:8889")
	err = api.SendMultisigEvmTx("", tx)
	if err != nil {
		t.Fatal(err)
	}
}

type account struct {
	PrivKey string
	PubKey  string
	Address string
}

func generateAccounts(n int) []account {
	acts := make([]account, n)
	for i := 0; i < n; i++ {
		key, _ := crypto.GenerateKey()
		buff := make([]byte, 32)
		copy(buff[32-len(key.D.Bytes()):], key.D.Bytes())
		acts[i].PrivKey = ethcmn.Bytes2Hex(buff)
		acts[i].PubKey = ethcmn.Bytes2Hex(crypto.CompressPubkey(&key.PublicKey))
		acts[i].Address = crypto.PubkeyToAddress(key.PublicKey).String()
	}

	return acts
}

func TestAPISDK_BuildEvmTx(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	tx, err := api.BuildEvmTx(DEV_USER_PUBKEY, DEV_USER_PRIVKEY, "0x6e91349995276c98537a4225c30c964F83fD11E3",
		"1", "", 23000, "1", "gosdk-v1.2.3")
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println("hash=", tx.Hash().Hex())

	err = api.SendEvmTx("", tx)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAPISDK_CheckTx(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)

	b, err := api.CheckTx("0xb63903ccf97104687c81e4f2f4df76f3d162f119aea6143cc8f9da262ad62bf9")
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println("b=", b)
}

func TestAPISDK_CheckTxWithCtx(t *testing.T) {
	api := NewAPIClient(DEV_API_URL_BASE)
	ctx := context.Background()
	ctx, cancel := context.WithTimeout(ctx, time.Second*3)
	defer cancel()

	b, err := api.CheckTxWithCtx(ctx, "0x5dabd60e075cfe6cd0429b039669077667306eea88c04fe311dca007b6f5e960")
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println("b=", b)
}
